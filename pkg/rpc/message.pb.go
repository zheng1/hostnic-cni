// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/rpc/message.proto

/*
	Package rpc is a generated protocol buffer package.

	It is generated from these files:
		pkg/rpc/message.proto

	It has these top-level messages:
		VxNet
		HostNic
		PodInfo
		IPAMMessage
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_FREE     Status = 0
	Status_USING    Status = 1
	Status_DELETING Status = 2
	Status_ERROR    Status = 3
	Status_DELETED  Status = 4
)

var Status_name = map[int32]string{
	0: "FREE",
	1: "USING",
	2: "DELETING",
	3: "ERROR",
	4: "DELETED",
}
var Status_value = map[string]int32{
	"FREE":     0,
	"USING":    1,
	"DELETING": 2,
	"ERROR":    3,
	"DELETED":  4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

type VxNet struct {
	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Gateway  string `protobuf:"bytes,2,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	Network  string `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	RouterID string `protobuf:"bytes,4,opt,name=RouterID,proto3" json:"RouterID,omitempty"`
	Zone     string `protobuf:"bytes,5,opt,name=Zone,proto3" json:"Zone,omitempty"`
}

func (m *VxNet) Reset()                    { *m = VxNet{} }
func (m *VxNet) String() string            { return proto.CompactTextString(m) }
func (*VxNet) ProtoMessage()               {}
func (*VxNet) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *VxNet) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *VxNet) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *VxNet) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *VxNet) GetRouterID() string {
	if m != nil {
		return m.RouterID
	}
	return ""
}

func (m *VxNet) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type HostNic struct {
	VxNet          *VxNet `protobuf:"bytes,1,opt,name=VxNet" json:"VxNet,omitempty"`
	ID             string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	HardwareAddr   string `protobuf:"bytes,3,opt,name=HardwareAddr,proto3" json:"HardwareAddr,omitempty"`
	PrimaryAddress string `protobuf:"bytes,4,opt,name=PrimaryAddress,proto3" json:"PrimaryAddress,omitempty"`
	IsPrimary      bool   `protobuf:"varint,5,opt,name=IsPrimary,proto3" json:"IsPrimary,omitempty"`
	Using          bool   `protobuf:"varint,6,opt,name=Using,proto3" json:"Using,omitempty"`
	Reserved       bool   `protobuf:"varint,7,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
	RouteTableNum  int32  `protobuf:"varint,8,opt,name=RouteTableNum,proto3" json:"RouteTableNum,omitempty"`
	Status         Status `protobuf:"varint,9,opt,name=Status,proto3,enum=rpc.Status" json:"Status,omitempty"`
}

func (m *HostNic) Reset()                    { *m = HostNic{} }
func (m *HostNic) String() string            { return proto.CompactTextString(m) }
func (*HostNic) ProtoMessage()               {}
func (*HostNic) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *HostNic) GetVxNet() *VxNet {
	if m != nil {
		return m.VxNet
	}
	return nil
}

func (m *HostNic) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *HostNic) GetHardwareAddr() string {
	if m != nil {
		return m.HardwareAddr
	}
	return ""
}

func (m *HostNic) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *HostNic) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *HostNic) GetUsing() bool {
	if m != nil {
		return m.Using
	}
	return false
}

func (m *HostNic) GetReserved() bool {
	if m != nil {
		return m.Reserved
	}
	return false
}

func (m *HostNic) GetRouteTableNum() int32 {
	if m != nil {
		return m.RouteTableNum
	}
	return 0
}

func (m *HostNic) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_FREE
}

type PodInfo struct {
	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Containter string `protobuf:"bytes,3,opt,name=Containter,proto3" json:"Containter,omitempty"`
	Netns      string `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName     string `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	NicType    string `protobuf:"bytes,6,opt,name=NicType,proto3" json:"NicType,omitempty"`
	PodIP      string `protobuf:"bytes,7,opt,name=PodIP,proto3" json:"PodIP,omitempty"`
	HostNic    string `protobuf:"bytes,8,opt,name=HostNic,proto3" json:"HostNic,omitempty"`
	VxNet      string `protobuf:"bytes,9,opt,name=VxNet,proto3" json:"VxNet,omitempty"`
}

func (m *PodInfo) Reset()                    { *m = PodInfo{} }
func (m *PodInfo) String() string            { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()               {}
func (*PodInfo) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

func (m *PodInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodInfo) GetContainter() string {
	if m != nil {
		return m.Containter
	}
	return ""
}

func (m *PodInfo) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *PodInfo) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *PodInfo) GetNicType() string {
	if m != nil {
		return m.NicType
	}
	return ""
}

func (m *PodInfo) GetPodIP() string {
	if m != nil {
		return m.PodIP
	}
	return ""
}

func (m *PodInfo) GetHostNic() string {
	if m != nil {
		return m.HostNic
	}
	return ""
}

func (m *PodInfo) GetVxNet() string {
	if m != nil {
		return m.VxNet
	}
	return ""
}

type IPAMMessage struct {
	Args   *PodInfo `protobuf:"bytes,1,opt,name=Args" json:"Args,omitempty"`
	Nic    *HostNic `protobuf:"bytes,2,opt,name=Nic" json:"Nic,omitempty"`
	Peek   bool     `protobuf:"varint,3,opt,name=Peek,proto3" json:"Peek,omitempty"`
	Delete bool     `protobuf:"varint,4,opt,name=Delete,proto3" json:"Delete,omitempty"`
}

func (m *IPAMMessage) Reset()                    { *m = IPAMMessage{} }
func (m *IPAMMessage) String() string            { return proto.CompactTextString(m) }
func (*IPAMMessage) ProtoMessage()               {}
func (*IPAMMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{3} }

func (m *IPAMMessage) GetArgs() *PodInfo {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *IPAMMessage) GetNic() *HostNic {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *IPAMMessage) GetPeek() bool {
	if m != nil {
		return m.Peek
	}
	return false
}

func (m *IPAMMessage) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

func init() {
	proto.RegisterType((*VxNet)(nil), "rpc.VxNet")
	proto.RegisterType((*HostNic)(nil), "rpc.HostNic")
	proto.RegisterType((*PodInfo)(nil), "rpc.PodInfo")
	proto.RegisterType((*IPAMMessage)(nil), "rpc.IPAMMessage")
	proto.RegisterEnum("rpc.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CNIBackend service

type CNIBackendClient interface {
	AddNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error)
	DelNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error)
}

type cNIBackendClient struct {
	cc *grpc.ClientConn
}

func NewCNIBackendClient(cc *grpc.ClientConn) CNIBackendClient {
	return &cNIBackendClient{cc}
}

func (c *cNIBackendClient) AddNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error) {
	out := new(IPAMMessage)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/AddNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) DelNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error) {
	out := new(IPAMMessage)
	err := grpc.Invoke(ctx, "/rpc.CNIBackend/DelNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CNIBackend service

type CNIBackendServer interface {
	AddNetwork(context.Context, *IPAMMessage) (*IPAMMessage, error)
	DelNetwork(context.Context, *IPAMMessage) (*IPAMMessage, error)
}

func RegisterCNIBackendServer(s *grpc.Server, srv CNIBackendServer) {
	s.RegisterService(&_CNIBackend_serviceDesc, srv)
}

func _CNIBackend_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).AddNetwork(ctx, req.(*IPAMMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_DelNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).DelNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/DelNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).DelNetwork(ctx, req.(*IPAMMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIBackend",
	HandlerType: (*CNIBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetwork",
			Handler:    _CNIBackend_AddNetwork_Handler,
		},
		{
			MethodName: "DelNetwork",
			Handler:    _CNIBackend_DelNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc/message.proto",
}

func (m *VxNet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VxNet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.RouterID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RouterID)))
		i += copy(dAtA[i:], m.RouterID)
	}
	if len(m.Zone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	return i, nil
}

func (m *HostNic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VxNet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.VxNet.Size()))
		n1, err := m.VxNet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.HardwareAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HardwareAddr)))
		i += copy(dAtA[i:], m.HardwareAddr)
	}
	if len(m.PrimaryAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PrimaryAddress)))
		i += copy(dAtA[i:], m.PrimaryAddress)
	}
	if m.IsPrimary {
		dAtA[i] = 0x28
		i++
		if m.IsPrimary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Using {
		dAtA[i] = 0x30
		i++
		if m.Using {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reserved {
		dAtA[i] = 0x38
		i++
		if m.Reserved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RouteTableNum != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.RouteTableNum))
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *PodInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Containter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Containter)))
		i += copy(dAtA[i:], m.Containter)
	}
	if len(m.Netns) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Netns)))
		i += copy(dAtA[i:], m.Netns)
	}
	if len(m.IfName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IfName)))
		i += copy(dAtA[i:], m.IfName)
	}
	if len(m.NicType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NicType)))
		i += copy(dAtA[i:], m.NicType)
	}
	if len(m.PodIP) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PodIP)))
		i += copy(dAtA[i:], m.PodIP)
	}
	if len(m.HostNic) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HostNic)))
		i += copy(dAtA[i:], m.HostNic)
	}
	if len(m.VxNet) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VxNet)))
		i += copy(dAtA[i:], m.VxNet)
	}
	return i, nil
}

func (m *IPAMMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAMMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Args != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Args.Size()))
		n2, err := m.Args.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Nic != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Nic.Size()))
		n3, err := m.Nic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Peek {
		dAtA[i] = 0x18
		i++
		if m.Peek {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Delete {
		dAtA[i] = 0x20
		i++
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VxNet) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RouterID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *HostNic) Size() (n int) {
	var l int
	_ = l
	if m.VxNet != nil {
		l = m.VxNet.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.HardwareAddr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsPrimary {
		n += 2
	}
	if m.Using {
		n += 2
	}
	if m.Reserved {
		n += 2
	}
	if m.RouteTableNum != 0 {
		n += 1 + sovMessage(uint64(m.RouteTableNum))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	return n
}

func (m *PodInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Containter)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Netns)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IfName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NicType)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.PodIP)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.HostNic)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.VxNet)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *IPAMMessage) Size() (n int) {
	var l int
	_ = l
	if m.Args != nil {
		l = m.Args.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Nic != nil {
		l = m.Nic.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Peek {
		n += 2
	}
	if m.Delete {
		n += 2
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VxNet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VxNet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VxNet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostNic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxNet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VxNet == nil {
				m.VxNet = &VxNet{}
			}
			if err := m.VxNet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrimary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrimary = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Using", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Using = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reserved = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableNum", wireType)
			}
			m.RouteTableNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostNic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostNic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VxNet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAMMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAMMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAMMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = &PodInfo{}
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nic == nil {
				m.Nic = &HostNic{}
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peek", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Peek = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pkg/rpc/message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x9d, 0x3f, 0xfb, 0xa6, 0x5f, 0x65, 0x8d, 0xfa, 0x21, 0xab, 0x42, 0x56, 0x64, 0x10,
	0xaa, 0x58, 0xb4, 0x52, 0x78, 0x82, 0xb4, 0x36, 0xad, 0x25, 0x6a, 0xa2, 0x69, 0xcb, 0x82, 0xdd,
	0xd4, 0xbe, 0x8d, 0xa2, 0x36, 0xb6, 0x35, 0x9e, 0x52, 0xaa, 0xbe, 0x08, 0x6b, 0x9e, 0x86, 0x25,
	0x8f, 0x80, 0xc2, 0x8a, 0xb7, 0x40, 0x73, 0x3d, 0x4e, 0x13, 0x58, 0xb1, 0xf2, 0x9c, 0x73, 0xc6,
	0xf6, 0xb9, 0xe7, 0xcc, 0xc0, 0xff, 0xd5, 0xcd, 0xec, 0x50, 0x56, 0xd9, 0xe1, 0x02, 0xeb, 0x5a,
	0xcc, 0xf0, 0xa0, 0x92, 0xa5, 0x2a, 0x59, 0x47, 0x56, 0x59, 0xf8, 0x08, 0xbd, 0x0f, 0x9f, 0x53,
	0x54, 0x6c, 0x07, 0xec, 0x24, 0xf2, 0xad, 0x91, 0xb5, 0xef, 0x72, 0x3b, 0x89, 0x98, 0x0f, 0x83,
	0x13, 0xa1, 0xf0, 0x5e, 0x3c, 0xf8, 0x36, 0x91, 0x2d, 0xd4, 0x4a, 0x8a, 0xea, 0xbe, 0x94, 0x37,
	0x7e, 0xa7, 0x51, 0x0c, 0x64, 0x7b, 0xe0, 0xf0, 0xf2, 0x4e, 0xa1, 0x4c, 0x22, 0xbf, 0x4b, 0xd2,
	0x0a, 0x33, 0x06, 0xdd, 0x8f, 0x65, 0x81, 0x7e, 0x8f, 0x78, 0x5a, 0x87, 0x5f, 0x6d, 0x18, 0x9c,
	0x96, 0xb5, 0x4a, 0xe7, 0x19, 0x1b, 0x19, 0x23, 0x64, 0x61, 0x38, 0x86, 0x03, 0x59, 0x65, 0x07,
	0xc4, 0xf0, 0x0d, 0x87, 0xf6, 0xca, 0x61, 0x08, 0xdb, 0xa7, 0x42, 0xe6, 0xf7, 0x42, 0xe2, 0x24,
	0xcf, 0xa5, 0x31, 0xb3, 0xc1, 0xb1, 0x57, 0xb0, 0x33, 0x95, 0xf3, 0x85, 0x90, 0x0f, 0x1a, 0x62,
	0x5d, 0x1b, 0x5f, 0x7f, 0xb0, 0xec, 0x39, 0xb8, 0x49, 0x6d, 0x38, 0xb2, 0xe8, 0xf0, 0x27, 0x82,
	0xed, 0x42, 0xef, 0xb2, 0x9e, 0x17, 0x33, 0xbf, 0x4f, 0x4a, 0x03, 0x68, 0x5a, 0xac, 0x51, 0x7e,
	0xc2, 0xdc, 0x1f, 0x90, 0xb0, 0xc2, 0xec, 0x25, 0xfc, 0x47, 0x93, 0x5f, 0x88, 0xab, 0x5b, 0x4c,
	0xef, 0x16, 0xbe, 0x33, 0xb2, 0xf6, 0x7b, 0x7c, 0x93, 0x64, 0x2f, 0xa0, 0x7f, 0xae, 0x84, 0xba,
	0xab, 0x7d, 0x77, 0x64, 0xed, 0xef, 0x8c, 0x87, 0x34, 0x74, 0x43, 0x71, 0x23, 0x85, 0xbf, 0x2c,
	0x18, 0x4c, 0xcb, 0x3c, 0x29, 0xae, 0x4b, 0x1d, 0x62, 0x2a, 0x16, 0x68, 0x6a, 0xa2, 0xb5, 0xb6,
	0xae, 0x9f, 0x75, 0x25, 0x32, 0x34, 0xe9, 0x3c, 0x11, 0x2c, 0x00, 0x38, 0x2e, 0x0b, 0x25, 0xe6,
	0x85, 0xc2, 0x36, 0xa2, 0x35, 0x46, 0x8f, 0x96, 0xa2, 0x2a, 0xda, 0x5c, 0x1a, 0xc0, 0x9e, 0x41,
	0x3f, 0xb9, 0xa6, 0x3f, 0x35, 0x75, 0x19, 0x44, 0xd5, 0xcf, 0xb3, 0x8b, 0x87, 0x0a, 0x29, 0x0a,
	0x5d, 0x7d, 0x03, 0xf5, 0x77, 0xb4, 0xc9, 0x29, 0x25, 0xe1, 0xf2, 0x06, 0xe8, 0xfd, 0xa6, 0x5f,
	0x0a, 0xc0, 0xe5, 0xab, 0xba, 0x77, 0xdb, 0xba, 0xdd, 0x66, 0x3f, 0x81, 0xf0, 0x11, 0x86, 0xc9,
	0x74, 0x72, 0x76, 0xd6, 0x9c, 0x53, 0x36, 0x82, 0xee, 0x44, 0xce, 0x6a, 0x73, 0x24, 0xb6, 0x29,
	0x1d, 0x13, 0x05, 0x27, 0x85, 0x05, 0xd0, 0xd1, 0x1f, 0xb7, 0xd7, 0x36, 0x98, 0x3f, 0x70, 0x2d,
	0xe8, 0xc0, 0xa6, 0x88, 0xcd, 0x41, 0x75, 0x38, 0xad, 0xf5, 0x70, 0x11, 0xde, 0xa2, 0x42, 0x9a,
	0xd9, 0xe1, 0x06, 0xbd, 0x3e, 0x6e, 0xdb, 0x60, 0x0e, 0x74, 0xdf, 0xf2, 0x38, 0xf6, 0xb6, 0x98,
	0x0b, 0xbd, 0xcb, 0xf3, 0x24, 0x3d, 0xf1, 0x2c, 0xb6, 0x0d, 0x4e, 0x14, 0xbf, 0x8b, 0x2f, 0x34,
	0xb2, 0xb5, 0x10, 0x73, 0xfe, 0x9e, 0x7b, 0x1d, 0x36, 0x84, 0x01, 0x09, 0x71, 0xe4, 0x75, 0xc7,
	0x0a, 0xe0, 0x38, 0x4d, 0x8e, 0x44, 0x76, 0x83, 0x45, 0xce, 0xc6, 0x00, 0x93, 0x3c, 0x6f, 0xaf,
	0x87, 0x47, 0xfe, 0xd6, 0x06, 0xdc, 0xfb, 0x8b, 0x09, 0xb7, 0xf4, 0x3b, 0x11, 0xde, 0xfe, 0xd3,
	0x3b, 0x47, 0xde, 0xb7, 0x65, 0x60, 0x7d, 0x5f, 0x06, 0xd6, 0x8f, 0x65, 0x60, 0x7d, 0xf9, 0x19,
	0x6c, 0x5d, 0xf5, 0xe9, 0x8e, 0xbf, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xb8, 0xf0, 0xef,
	0xfc, 0x03, 0x00, 0x00,
}
